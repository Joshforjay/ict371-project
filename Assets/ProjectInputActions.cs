//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/ProjectInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ProjectInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ProjectInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ProjectInputActions"",
    ""maps"": [
        {
            ""name"": ""gameplay"",
            ""id"": ""3d2e364f-5953-4b14-82f2-4ca71269fbf1"",
            ""actions"": [
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Value"",
                    ""id"": ""c3b7901f-3442-48cc-ae12-9ec55a92db5c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fda5ee8a-05fb-4844-903b-b73383b97526"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Value"",
                    ""id"": ""9dd8efdd-e32d-4cdf-bee1-1bc57d116a8e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BuildPower"",
                    ""type"": ""Button"",
                    ""id"": ""2b941043-13ed-40ef-88b1-c2d668b60625"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""87f12ede-aa1c-4747-b398-62a1d2823f55"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a956412-b39e-41c2-90f0-6ea1ae034f31"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0c5868b-b547-4fe8-89ed-b90a1192259f"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c27575e7-e283-458f-8cde-78a30408810f"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BuildPower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // gameplay
        m_gameplay = asset.FindActionMap("gameplay", throwIfNotFound: true);
        m_gameplay_Yaw = m_gameplay.FindAction("Yaw", throwIfNotFound: true);
        m_gameplay_Pitch = m_gameplay.FindAction("Pitch", throwIfNotFound: true);
        m_gameplay_Roll = m_gameplay.FindAction("Roll", throwIfNotFound: true);
        m_gameplay_BuildPower = m_gameplay.FindAction("BuildPower", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // gameplay
    private readonly InputActionMap m_gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_gameplay_Yaw;
    private readonly InputAction m_gameplay_Pitch;
    private readonly InputAction m_gameplay_Roll;
    private readonly InputAction m_gameplay_BuildPower;
    public struct GameplayActions
    {
        private @ProjectInputActions m_Wrapper;
        public GameplayActions(@ProjectInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Yaw => m_Wrapper.m_gameplay_Yaw;
        public InputAction @Pitch => m_Wrapper.m_gameplay_Pitch;
        public InputAction @Roll => m_Wrapper.m_gameplay_Roll;
        public InputAction @BuildPower => m_Wrapper.m_gameplay_BuildPower;
        public InputActionMap Get() { return m_Wrapper.m_gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @Yaw.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnYaw;
                @Yaw.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnYaw;
                @Yaw.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnYaw;
                @Pitch.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPitch;
                @Pitch.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPitch;
                @Pitch.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPitch;
                @Roll.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRoll;
                @BuildPower.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBuildPower;
                @BuildPower.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBuildPower;
                @BuildPower.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBuildPower;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Yaw.started += instance.OnYaw;
                @Yaw.performed += instance.OnYaw;
                @Yaw.canceled += instance.OnYaw;
                @Pitch.started += instance.OnPitch;
                @Pitch.performed += instance.OnPitch;
                @Pitch.canceled += instance.OnPitch;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @BuildPower.started += instance.OnBuildPower;
                @BuildPower.performed += instance.OnBuildPower;
                @BuildPower.canceled += instance.OnBuildPower;
            }
        }
    }
    public GameplayActions @gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnYaw(InputAction.CallbackContext context);
        void OnPitch(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnBuildPower(InputAction.CallbackContext context);
    }
}
